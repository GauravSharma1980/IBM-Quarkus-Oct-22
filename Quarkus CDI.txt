						..............................................................................................
				  Dependency Injection - IOC
..............................................................................................

What is IOC?
 Inversion of Control is design pattern for creating depandent objects and injecting into another.

How IOC is implemented in Spring?
 Spring Container is the reference implemnetation of IOC design pattern

How IOC is implemented in Quarkus?
  Quarkus uses JEE spec called CDI context Dependency Injection

What is CDI?
  CDI is JEE Spec? -Jakarta Contexts and Dependency Injection

Quarkus and CDI ?
 Quarkus has not implemented 100% CDI spec due to some reasons.

  "Quarkus ArC" is a build-time oriented dependency injection based on CDI 2.0.

			     Quarkus Application
				|
			     Quarkus Arc -layer built on the top of CDI
				  |
			      JEE CDI

JEE CDI Vs Quarkus CDI:
......................

JEE CDI "resolves" bean dependency during runtime of an application,after deployment, if something goes wrong, errors are reported only during runtime.

Quarkus CDI uses a model called "Build Time"
   During application build process, if there is any dependency missmatch related errors are reported.

Build-time Processing Benefits and Drawbacks:
..............................................

Fail Fast
  Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as AmbiguousResolutionException or UnsatisfiedResolutionException.

Instant Startup
  When the app starts ArC just loads all the metadata and initializes some internal structures. There is no need to analyze the application classes again. This means negligible startup overhead.
 
Minimized Runtime
  In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars. Weld 3.1.1 (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar. In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint.

Optimized Code Paths and Metadata Structures
  When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already. 

Core Features of CDI:

1.Bean: What is Bean?

Bean is java object

Types of Beans:

1.Application Beans(pojos)
   Objects are created by developer 
   Objects life cycle is managed by developer and JVM

2.Container managed Bean
   Objects created by the Container

What is container?
   Container is runtime where quarkus apps are running.
 
  Object life cycle are managed by Runtime 

What are the advantages of Container Managed Bean?

>The developer can focus application logic.
.............................................................................................
				 CDI implemenation

CDI is implemented via "Annotations"

Apis in cdi:

1.javax.inject
2.javax.enterprise.inject - core di apis
3.javax.enterprise.context - scope and contextuaal apis
4.javax.enterprise.events -  publishing events and listening events-  container wide event driven programming
5.javax.enterprise.util
6.javax.interceptor

Common Annoations:

1.@Inject  
2.@Qualifer
3.LifeCycle of Bean
   @ApplicationScoped
   @SessionScoped
   @RequestScoped
   @SingleTon
 
4.@Observes - event listner
....................................................................................
				Quarkus app biz logic


Quarkus:
 1.Controllers - Resource -REST Api
 2.Service - Having data and Biz logic


package org.acme.services;

public class WelcomeService {

    public String sayWelcome(){
        return "Welcome to Quarkus";
    }
}
package org.acme.resource;

import org.acme.services.WelcomeService;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/welcome")
public class WelcomeResource {
    private WelcomeService welcomeService = new WelcomeService();

    @GET
    public Response sayWelcome() {
        return Response.ok().entity(welcomeService.sayWelcome()).build();
    }
}

The class "WelcomeService" Bean class - Application bean - we have to create instance of this class.

Quarkus recommends to apply "ioc" principle : DOnt create object by yourself,ask the container to create and manage , just use created object(instance).

@ApplicationScoped
@SingleTon
@SessionScoped
@RequestScoped

.....................................................................................	     			Types of Injection in Quarkus  -Inection Points

1.Setter Injection
2.Field Injection
3.Constructor injection


Simple Injection:
package org.acme.services;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class WelcomeService {
    public String sayWelcome(){
        return "Welcome to Quarkus!!!";
    }
}

package org.acme.resource;

import org.acme.services.WelcomeService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/welcome")
public class WelcomeResource {
    //  private WelcomeService welcomeService = new WelcomeService();
    //Dependency injection
    @Inject
    private WelcomeService welcomeService;

    @GET
    public Response sayWelcome() {
        return Response.ok().entity(welcomeService.sayWelcome()).build();
    }
}
....................................................................................
		    Setter Injections
...................................................................................
package org.acme.resource;

import org.acme.services.WelcomeService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/welcome")
public class WelcomeResource {
    //  private WelcomeService welcomeService = new WelcomeService();
    //Dependency injection
    //Field Injection
//    @Inject
//    private WelcomeService welcomeService;
    //Setter Injection
    private  WelcomeService welcomeService;
    @Inject
    public void setWelcomeService(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public Response sayWelcome() {
        return Response.ok().entity(welcomeService.sayWelcome()).build();
    }
}
...................................................................................
				Constructor Injection
...................................................................................
package org.acme.resource;

import org.acme.services.WelcomeService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/welcome")
public class WelcomeResource {
    //  private WelcomeService welcomeService = new WelcomeService();
    //Dependency injection
    //Field Injection
//    @Inject
//    private WelcomeService welcomeService;
    //Setter Injection
//    private  WelcomeService welcomeService;
//    @Inject
//    public void setWelcomeService(WelcomeService welcomeService) {
//        this.welcomeService = welcomeService;
//    }
    private WelcomeService welcomeService;

    public WelcomeResource() {
    }

    @Inject
    public WelcomeResource(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public Response sayWelcome() {
        return Response.ok().entity(welcomeService.sayWelcome()).build();
    }
}
...................................................................................

Common Things:

1.private keyword is not necessary in any type of DI

package org.acme.resource;

import org.acme.services.WelcomeService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/welcome")
public class WelcomeResource {

    WelcomeService welcomeService;

    public WelcomeResource() {
    }

    @Inject
    public WelcomeResource(WelcomeService welcomeService) {
        this.welcomeService = welcomeService;
    }

    @GET
    public Response sayWelcome() {
        return Response.ok().entity(welcomeService.sayWelcome()).build();
    }
}
....................................................................................

As per coding guidelines, field injection is recommended.


....................................................................................
			Injecting multiple Depedencies
....................................................................................
package org.acme.resource;

import org.acme.services.HeroService;
import org.acme.services.HeroineService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/movies")
public class MovieResource {
    @Inject
    HeroService heroService;
    @Inject
    HeroineService heroineService;

    @GET
    @Path("/actors")
    public Response getActorDetails() {
        String actors = heroService.getHero() + heroineService.getHeroine();
        return Response.ok().entity(actors).build();
    }

}
package org.acme.services;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HeroService {

    public String getHero(){
        return "Hero";
    }
}
package org.acme.services;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HeroineService {
    public String getHeroine(){
        return  "Heroine";
    }
}








