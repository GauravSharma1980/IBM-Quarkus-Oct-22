				Service

....................................................................................
How to design service?

Each service expose apis and collaborations,its relationship with services.

API:
 Application Programming interface.

API implmenations

1.RPI
   Remote Procedurce invocation.
 Services are ready to talk to another services via network
Eg
REST API
GraphQL API
RPC -gRPC

2.Message Oriented
 MOM
   -API publish messages to the message brokers 
   -API consumes messages from the message brokers
....................................................................................
		     Quarkus-Microservice-Implemenations

			Service API design: REST API
....................................................................................

			REST API Design in JEE(MicroProfile)

Java API for RESTful Web Services (JAX-RS) Specification:
 Using this specifcation we design Rest api.

Implementation for JAX-RS:
.........................

There are frameworks there to implement JAX-RS.

RESTEasy:
  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.


Moreover, RESTEasy also implements the MicroProfile REST Client specification API


Quarkus team uses RESTEasy framework for building MicroService's REST API Design

<dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
</dependency>

How to start designing REST API?

The key abstraction of information in REST is a resource.

What is Resource?

Any information that can be named can be a resource:
 a document or image, a temporal service (e.g. "today's weather in Los Angeles"), a collection of other resources, a non-virtual object (e.g. a person), and so on. In other words, any concept that might be the target of an author's hypertext reference must fit within the definition of a resource.
 A resource is a conceptual mapping to a set of entities, not the entity that corresponds to the mapping at any particular point in time.

 "Resource could be any thing but that should be relavent to the problem domain"

What to represent Resource in Program?

 Resource is presented by "class" during compile time and Object during runtime.

Every Resource is Object, Since it is object which has "api"(methods).

Every method will do some action.

Action could be "reterival,add,update,delete"

Every action is controlled by remote software/user through some rules called protocal(http).

Every Action is mapped with Protocal methods -  GET,PUT,DELETE,UPDATE

Sample Resource;

According to JAX-RS spec

Resource should

  DomainNameResource

class UserResource {
   
   //apis
   public Response fetch(){

   }
   public Response save(User user){}
  ....
}

Resource Identifiers:
   Each resource must be identified by end users/programs via  URL pattern.

/api/resource

JAX-RS(RESTEasy) uses annotation in order to convert normal class into Resource class

Note:
 URL must be unique in the system
 If the same url is duplicated, the system will return response which url is matched that data will be returned.
.....................................................................................
						
package org.acme;

import javax.ws.rs.*;

@Path("/api/users")
public class UserResource {

    //api
    @GET
    public String getUsers(){
        return "Users";
    }
    @POST
    public String saveUser(){
        return "Saved";
    }
    @PUT
    public String updateUser(){
        return "Updated";
    }
    @DELETE
    public String removeUser(){
        return  "remove";
    }
}
.....................................................................................
				
Regular expressions and path design:
......................................

package org.acme;

import javax.ws.rs.*;

//main path
@Path("/api/users")
public class UserResource {

    //api
    @GET
    public String getUsers(){
        return "Users";
    }
    @GET
    @Path("/something")
    public String something(){
        return "Something";
    }
    @POST
    public String saveUser(){
        return "Saved";
    }

    //regular expressions:  mini language for pattern matching
    //syntax :"{variable-Name[":" regularexpression]}"

    //api/users/foo/bar
    //api/users/me/you/bar
    @Path("{foo:.*}/bar")
    @GET
    public String getInfo(){
        return "Info";
    }
    //api/users/foo/stuff
    //api/users/bar/stuff
    @Path("/{variable}/stuff")
    @GET
    public String getInformation(){
        return  "Information";
    }
    @PUT
    public String updateUser(){
        return "Updated";
    }
    @DELETE
    public String removeUser(){
        return  "remove";
    }
}
....................................................................................
			Path Parameters


package org.acme;

public class Category {

    public Category(){
    }
    public Category(String category) {
    }

    @Override
    public String toString() {
        return "Food";
    }
}

Note : when you map any class with path parameter,you must have arg constructors
we need to string methods.

package org.acme;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

@Path("/api/products")
public class ProductResource {

    @GET
    public String list() {
        return "products";
    }
    /**
     * //How to read Id inside Api -  @PathParam
     * Generally clients sends strings , RESTeasy converts automatically into Integer
     * Even we can map other objects
     */
    @GET
    @Path("/{id}")
    public String listById(@PathParam("id") Integer id) {
        return "Products By Id" + id;
    }
    @Path("/category/{category}")
    @GET
    public String listByCategory(@PathParam("category") Category category) {
        return "Category" + category ;
    }
    //rating
    @GET
    @Path("/{name}/{rating}")
    public String getRating(@PathParam("name") String name, @PathParam("rating") String rating) {
        return name + " " + rating;
    }
}
....................................................................................
Data can be passed to the end point

1.through url
   data passed
2.through body(payload)

Matrix Parameters:
.................
package org.acme;
import javax.ws.rs.GET;
import javax.ws.rs.MatrixParam;
import javax.ws.rs.Path;

@Path("/library")
public class BookResource {
    //http://localhost:8080/library/books;name=QuarkusInACtion;author=Bill
    @GET
    @Path("/books")
    public String getBookDetails(@MatrixParam("name") String name, @MatrixParam("author") String title) {
        return name + " " + title;
    }
}
...................................................................................	
			Query Parameters
..................................................................................
package org.acme;
import javax.ws.rs.GET;
import javax.ws.rs.MatrixParam;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;

@Path("/library")
public class BookResource {
    //http://localhost:8080/library/books;name=QuarkusInACtion;author=Bill
    @GET
    @Path("/books")
    public String getBookDetails(@MatrixParam("name") String name, @MatrixParam("author") String title) {
        return name + " " + title;
    }
    //http://localhost:8080/library/books?copies=30&price=1200
    //no
    @Path("/query")
    @GET
    public String getBooks(@QueryParam("copies") int copies, @QueryParam("price") double price) {
        return copies + "Books " + " " + price;
    }
}
.....................................................................................package org.acme;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

@Path("/api/containerinfo")
public class ContextResource {

    @GET()
    @Path("/urls")
    public String getUriInfo(@Context UriInfo uriInfo) {
        System.out.println(uriInfo.getAbsolutePath() + " " + uriInfo.getRequestUri());
        return uriInfo.getAbsolutePath() + " " +uriInfo.getRequestUri();
    }

    @GET()
    @Path("/headers")
    public String getHeaders(@Context HttpHeaders headers) {
        System.out.println(headers.getRequestHeaders());
        return headers.getRequestHeaders().toString();
    }
}
.............................................................................................
				  DefaultValues for Path

if you dont pass Query parameters ,the default values can be assigned.

//localhost:8080/api/myproducts/filter => output phone
//localhost:8080/api/myproducts/filter?category=books => output books

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @Path("/filter")
    public String filterProductByCategoriees(@QueryParam("category") @DefaultValue("phone") String  category) {
        System.out.println("");
        return category;
    }
.....................................................................................








After Sending request, you will get error

Could not find MessageBodyWriter for response object of type: com.ibm.rs.response.type.Book of media type:
application/json

org.jboss.resteasy.core.NoMessageBodyWriterFoundFailure: Could not find MessageBodyWriter for
 response object of type: com.ibm.rs.response.type.Book of media type: application/json

The Quarkus runtime not able to convert Book object into json 

JSON is nothing but text representation of "Object". -

You need to convert Java object to "String"

in order to convert we need special lib.
....................................................................................	
.....................................................................................
				Response

REST Representations:
   How response to be represented by Resource to the User

In tradtional webservice, the result would be always XML - SOAP Based webservice.
In RESTfull webservice the result would be any thing , if user and server agrees upon
 - JSON Format - most popular data format

What can be Response?
 String- plain/text
 Json-
 XML
.....................................................................................

JAX-RS api can return any of one the type
 - String  - plain/text
 - Objects - application/json -  XML
 - Void    - no return type -  only status
 - Response - Response Object 
 - Reactive Type -Advanced		


		                Extensions				

What is extension?

  extension is, project dependency - jar dependency.

By default , you can have extensions when create new project.

Think of Quarkus extensions as your project dependencies.

Extensions configure, boot and integrate a framework or technology into your Quarkus application. 

They also do all of the heavy lifting of providing the right information to GraalVM for your application to compile natively.

How to manage extensions(dependency)?

managment means - add,removing,listing extensions

there are two ways

1.via maven or gradle 
2.via cli - quarkus

E:\session\IBM\2022\march\quarkus\code-with-quarkus>quarkus  ext ls
Current Quarkus extensions installed:

? ArtifactId                                         Extension Name
? quarkus-resteasy                                   RESTEasy JAX-RS
? quarkus-resteasy-jackson                           RESTEasy Jackson


E:\session\IBM\2022\march\quarkus\code-with-quarkus>quarkus  ext rm resteasy-jackson
[SUCCESS] Extension io.quarkus:quarkus-resteasy-jackson has been uninstalled

How to send JSON Payload as Response?

Quarks cant convert any object into JSON by default with help of "RestEasy" extension

Add resteasy-jackson

E:\session\IBM\2022\march\quarkus\code-with-quarkus>quarkus  ext add resteasy-jackson
[SUCCESS] Extension io.quarkus:quarkus-resteasy-jackson has been installed

package org.acme.response.types;

import io.quarkus.arc.lookup.LookupIfProperty;
import org.acme.response.types.entity.Movie;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.util.List;

@Path("/api/movies")
public class MovieResource {
    //String
    @GET
    @Path("/list")
    @Produces(MediaType.TEXT_PLAIN) // the type of data format
    public String getMovies() {
        return "Movies";
    }

    //void
    @GET
    @Path("/show")
    //No Content is returned -204- HTTP
    public void showBook() {
        System.out.println("show Movie");
    }

    //Object
    @GET
    @Path("/mymovie")
    @Produces(MediaType.APPLICATION_JSON)
    public Movie myMovie() {
        //return Movie
        return new Movie("894343434", "Matrix", "John");
    }

    @GET
    @Path("/mymovielist")
    @Produces(MediaType.APPLICATION_JSON)
    public List<Movie> myMovieList() {
        //return Movie
        return List.of(new Movie("894343434", "Matrix", "John"), new Movie("894343434", "Matrix", "John"));
    }
}
.................................................................................
			Limitions of Object(Movie,List) as Response

-if you want to customize the Response we cant,for eg if you want to add some custom headers like tokens,urls,resource information.


Reponse Object

Response;

 Object used to send "payload-data" along with meta data (http code,otherinformation)

HTTP Status codes:

-> informational response - 100 to 199-1X
-> success response -  200-299-2X
-> Redirects  - 300-399 -3X
-> client errors - 400-499 -4X
-> server errrors - 500-599 - 5X


Response:

Response class is abstract class contains two category of api

public abstract Object getEntity();
public abstract int getStatus();

Builder Class:

public static ResponseBuilder status(int status)
public static ResponseBuilder ok()
public static ResponseBuilder ok(Object entity)
public static ResponseBuilder created()
public static ResponseBuilder accepted()
public static ResponseBuilder noContent()

Response class has been desinged with "Builder" /Command Chain Pattern
https://docs.jboss.org/resteasy/docs/3.0.9.Final/javadocs/index.html

package org.acme.response.types;

import io.quarkus.arc.lookup.LookupIfProperty;
import org.acme.response.types.entity.Movie;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

@Path("/api/movies")
public class MovieResource {
    //String
    @GET
    @Path("/list")
    @Produces(MediaType.TEXT_PLAIN) // the type of data format
    public String getMovies() {
        return "Movies";
    }

    //void
    @GET
    @Path("/show")
    //No Content is returned -204- HTTP
    public void showBook() {
        System.out.println("show Movie");
    }

    //Object
    @GET
    @Path("/mymovie")
    @Produces(MediaType.APPLICATION_JSON)
    public Movie myMovie() {
        //return Movie
        return new Movie("894343434", "Matrix", "John");
    }

    @GET
    @Path("/mymovielist")
    @Produces(MediaType.APPLICATION_JSON)
    public List<Movie> myMovieList() {
        //return Movie
        return List.of(new Movie("894343434", "Matrix", "John"), new Movie("894343434", "Matrix", "John"));
    }
    //How to send Response Object

    @GET
    @Path("/mymovieresponse")
    @Produces(MediaType.APPLICATION_JSON)
    public Response myMovieResponse() {
        Movie movie = new Movie("894343434", "Matrix", "John");
        return Response
                .status(200)
                .entity(movie)
                .header("studio", "Marvels")
                .build();
    }
}
.....................................................................................
			   Sending data from client to Server
.....................................................................................

Ways to send data from client to server

1.Via Request Headers				
2.Via Parameters
    ->Path parameter  /api/products/10
    ->Query Parameter /api/products?filter=asc
    ->Matrix Parameter /api/products/name=abc;price=100
3.via Payload
   In http protocal, there is section called payload(body of the Protocal)
    ->The type of data could be json,xml,binary(images,videos,docs)

In order to inform the Server that what type of payload we are sending....are indefined by server via @Consumes

@Produces - output - server sending - content type
@Consumes - Input  - server accepting - accept 

eg:
Client - Postman
POST /api/books/save

{
    "name": "Quarkus in Action",
    "author": "Subramanian",
    "isbn": "894343434"
}
    //save
    @POST
    @Path("/save")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response saveBook(Book book) {
        System.out.println(book);
        //UriBuilder.fromResource(BookResource.class).build() this code will inject Location header
        //Location : http://localhost:8080/api/books
        //created -201
        return Response.created(UriBuilder.fromResource(BookResource.class).build()).build();
    }

................................................................................................				Status Codes And RestFul Api Design
..............................................................................................
Status Code : 100 to 500

1XX Information Responses

100 Continue
101 Switching Protocols
102 Processing
103 Early Hints

2XX Success

200 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No Content
205 Reset Content
206 Partial Content
207 Multi-Status
208 Already Reported
226 IM Used

3XX Redirection
300 Multiple Choices
301 Moved Permanently
302 Found
303 See Other
304 Not Modified
305 Use Proxy
306 Switch Proxy
307 Temporary Redirect
308 Permanent Redirect

4XX Client errors

400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406 Not Acceptable
407 Proxy Authentication Required
408 Request Timeout
409 Conflict
410 Gone
411 Length Required
412 Precondition Failed
413 Payload Too Large
414 URI Too Long
415 Unsupported Media Type
416 Range Not Satisfiable
417 Expectation Failed
418 I'm a teapot
420 Method Failure
421 Misdirected Request
422 Unprocessable Entity
423 Locked
424 Failed Dependency
426 Upgrade Required
428 Precondition Required
429 Too Many Requests
431 Request Header Fields Too Large
451 Unavailable For Legal Reasons

5XX Server errors
500 Internal Server error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 gateway Timeout
505 Http version not supported
506 Varient Also negotiate
507 Insufficient Storage
508 Loop Detected
510 Not Extended
511 Network Authentication Required
.....................................................................................
			   Negoation
....................................................................................

Agreement between client and server.

If client asks that hey server i want data in xml format,
 Server replies, that hey client yes i can serve you
 Server replies, that hey client yes i can't serve you

Types of negoation:
1.content negoation
2.language negoation
3.Encoding negoation.


Client ask with help of "Accept -*" Headers, Server will respond with "Content-*" Headers

..................................................................................

Steps:
1.install dependency

quarkus  ext add resteasy-jaxb
quarkus ext add  resteasy-reactive-jaxb
 <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-jaxb</artifactId>
</dependency>
<dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jaxb</artifactId>
/dependency>

2.We have to add @XmlRootElement
package org.acme.response.types.entity;

import javax.xml.bind.annotation.XmlRootElement;


3.How to test api with multi format 

open postman or any http client.

send request

URL -http:localhost:8080/negotiation/content
Method - GET
Client/Request HTTP Headers: Accept : application/json or Accept : application/xml

Response :
Request : Accept:application/json
Status : 200 OK
{
    "userId": 1,
    "userName": "admin"
}

Request : Accept: application/xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<user>
    <userId>1</userId>
    <userName>admin</userName>
</user>

Request: Accept :application/atom+xml

Response would be 

406 Not Acceptable
The server not able to send response what client is looking for.

Client uses Accept-* header

Server uses Content-* header



@XmlRootElement
public class Movie {
    private String id;
    private String name;
    private String author;

    public Movie() {
    }

    public Movie(String id, String name, String author) {
        this.id = id;
        this.name = name;
        this.author = author;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    @Override
    public String toString() {
        return "Movie{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", author='" + author + '\'' +
                '}';
    }
}


eg:
package org.acme.response.types;

import io.quarkus.arc.lookup.LookupIfProperty;
import org.acme.response.types.entity.Movie;

import javax.ws.rs.*;
import javax.ws.rs.Path;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import java.util.List;

@Path("/api/movies")
public class MovieResource {
    //String
    @GET
    @Path("/list")
    @Produces(MediaType.TEXT_PLAIN) // the type of data format
    public String getMovies() {
        return "Movies";
    }

    //void
    @GET
    @Path("/show")
    //No Content is returned -204- HTTP
    public void showBook() {
        System.out.println("show Movie");
    }

    //Object
    @GET
    @Path("/mymovie")
    @Produces(MediaType.APPLICATION_JSON)
    public Movie myMovie() {
        //return Movie
        return new Movie("894343434", "Matrix", "John");
    }

    @GET
    @Path("/mymovielist")
    @Produces(MediaType.APPLICATION_JSON)
    public List<Movie> myMovieList() {
        //return Movie
        return List.of(new Movie("894343434", "Matrix", "John"), new Movie("894343434", "Matrix", "John"));
    }
    //How to send Response Object

    @GET
    @Path("/mymovieresponse")
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Response myMovieResponse() {
        Movie movie = new Movie("894343434", "Matrix", "John");
        return Response
                .status(200)
                .entity(movie)
                .header("studio", "Marvels")
                .build();
    }

    //Get payload from the client
    @POST
    @Path("/save")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response save(Movie movie) {
        //persist this data into database
        System.out.println(movie);


        //UriBuilder.fromResource(BookResource.class).build() this code will inject Location header
        //Location : http://localhost:8080/api/books
        //created - 201 /save
        return Response
                .created(UriBuilder.fromResource(MovieResource.class)
                        .build())
                .build();
    }


}

..............................................................................................
				 When Client Sends Data to Server
..............................................................................................

Client is sending data in the form of json / xml or any format, server should able to process that.
content-type and annotation

  @Consumes - It defines the server acceptable content.


    @POST
    @Path("/create")
    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Response create(User user) {
        System.out.println("User " + user);
        return Response.status(201).entity("Created").build();
    }
..................................................................................
			  Exception Handling
..................................................................................			 What can be Response


Response Types:

1.SUCCESS Response
2.ERROR Response

How to handle / Convert ERRORS/Exceptions into HTTP Response Object?

 public Response getResponse(){

     return Response.ok().build();
 }

According to Application, Exception can be

1.System Exception :
  Exception thrown by jvm - NumberFormat,NullPointerException,ClassCastException.

2.Application Exception
   
  UserNotFoundException
  PasswordMissMatchException
  ...
public boolean validate(){

  if(passwordmatch){


  }
  else{ 
       throw new PasswordMismatchException("password does not match");
  } 
}
JAX-RS also provides the javax.ws.rs.WebApplicationException. 
This can be thrown by application code and automatically processed by JAX-RS without
having to write an explicit mapper.


package org.acme.response.types;

import io.quarkus.arc.lookup.LookupIfProperty;
import org.acme.response.types.entity.Movie;

import javax.ws.rs.*;
import javax.ws.rs.Path;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import java.util.List;

@Path("/api/movies")
public class MovieResource {
    //String
    @GET
    @Path("/list")
    @Produces(MediaType.TEXT_PLAIN) // the type of data format
    public String getMovies() {
        return "Movies";
    }

    //void
    @GET
    @Path("/show")
    //No Content is returned -204- HTTP
    public void showBook() {
        System.out.println("show Movie");
    }

    //Object
    @GET
    @Path("/mymovie")
    @Produces(MediaType.APPLICATION_JSON)
    public Movie myMovie() {
        //return Movie
        return new Movie("894343434", "Matrix", "John");
    }

    @GET
    @Path("/mymovielist")
    @Produces(MediaType.APPLICATION_JSON)
    public List<Movie> myMovieList() {
        //return Movie
        return List.of(new Movie("894343434", "Matrix", "John"), new Movie("894343434", "Matrix", "John"));
    }
    //How to send Response Object

    @GET
    @Path("/mymovieresponse")
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Response myMovieResponse() {
        Movie movie = new Movie("894343434", "Matrix", "John");
        return Response
                .status(200)
                .entity(movie)
                .header("studio", "Marvels")
                .build();
    }

    //Get payload from the client
    @POST
    @Path("/save")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response save(Movie movie) {
        //persist this data into database
        System.out.println(movie);


        //UriBuilder.fromResource(BookResource.class).build() this code will inject Location header
        //Location : http://localhost:8080/api/books
        //created - 201 /save
        return Response
                .created(UriBuilder.fromResource(MovieResource.class)
                        .build())
                .build();
    }

    @GET
    @Path("/hero/{name}")
    public Response getHero(@PathParam("name") String name) {
        if (name.equals("myhero")) {
            //throw new WebApplicationException(Response.Status.NOT_FOUND);
            return Response.ok().entity("Hero").build();
        }
        throw new WebApplicationException();
    }


}
................................................................................
package org.acme.response.types;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
public class WebApplicationMapper  implements ExceptionMapper<WebApplicationException> {

    @Override
    public Response toResponse(WebApplicationException exception) {
        return Response.ok().entity("Hero Not Found").build();
    }
}













  